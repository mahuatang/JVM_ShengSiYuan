/*第四集*/
类加载

在Java代码中，类型的加载、连接与初始化过程都是在程序运行期间完成的（是类，不是对象）
提供了更大的灵活性，增加了更多的可能性。

类加载器深入剖析

Java虚拟机与程序的生命周期
在如下集中情况下，Java虚拟机将结束生命周期
1.执行了System.exit()方法
2.程序正常执行结束
3.程序在执行过程中遇到了异常或错误而异常中止
4.由于操作系统出现错误而导致Java虚拟机进程终止

类的加载、连接与初始化

1.加载：查找并加载类的二进制数据

2.连接
验证：确保被加载的类的正确性
准备：为类的静态变量分配内存，并将其初始化为默认值
解析：把类中的符号引用转换为直接引用

3.初始化：为类的静态变量赋予正确的初始值

4.使用

5.卸载

/*第五集*/

类的加载、连接、初始化

Java程序对类的使用方式可分为两种
--主动使用
--被动使用
所有的Java虚拟机实现必须在每个类或接口被Java程序“首次主动使用”时才初始化它们

主动使用（七种）

-创建类的实例
-访问某个类或接口的静态变量，或者对该静态变量赋值 getstatic putstatic
-调用类的静态方法 invokestatic
-反射（如Class.forName("com.test.test)）
-初始化一个类的子类
-Java虚拟机启动时被表明为启动类的类（Java Test）
-JDK1.7开始提供的动态语言支持
java.lang.invoke.MethodHandle......(略)

除了以上七种情况，其他使用Java类的方式都被看作是对类的被动使用，都不会导致类的初始化。

类的加载

类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在内存中创建一个java.lang.Class对象（规范并未说明Class对象位于哪里，
HotSpot虚拟机将其放在了方法区中）用来封装类再方法区内的数据结构

加载.class文件的方式：

1.从本地系统中直接加载
2.通过网络下载.class文件
3.从zip，jar等归档文件中加载.class文件
4.从专有数据库中提取.class文件
5.将Java源文件动态编译为.class文件